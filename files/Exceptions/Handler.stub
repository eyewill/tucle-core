<?php

namespace App\Exceptions;

use Exception;
use Illuminate\Session\TokenMismatchException;
use Illuminate\Validation\ValidationException;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that should not be reported.
     *
     * @var array
     */
    protected $dontReport = [
        AuthorizationException::class,
        HttpException::class,
        ModelNotFoundException::class,
        ValidationException::class,
    ];

    /**
     * Report or log an exception.
     *
     * This is a great spot to send exceptions to Sentry, Bugsnag, etc.
     *
     * @param  \Exception  $e
     * @return void
     */
    public function report(Exception $e)
    {
        parent::report($e);
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Exception  $e
     * @return \Illuminate\Http\Response
     */
  public function render($request, Exception $e)
  {

    if (config('app.debug'))
    {
      return parent::render($request, $e);
    }

    if ($e instanceof TokenMismatchException)
    {
      return redirect()
        ->back()
        ->with('error', 'セッションがタイムアウトしたか、アクセスできないページです');
    }

    if ($this->isHttpException($e))
    {
      $status = $e->getStatusCode();
      $message = $this->getMessage($status);

      return response()->view("errors.common", [
        'exception' => $e,
        'message' => $message,
      ], $status);
    }

    return response()->view("errors.common", [
      'exception' => $e,
      'message' => 'ページを表示できませんでした',
    ], 500);
  }

  public function getMessage($statusCode)
  {
    switch ($statusCode)
    {
      case 400:
        return 'Bad Request';
      case 401:
        return '認証に失敗しました';
      case 403:
        return 'アクセス権がありません';
      case 404:
        return '存在しないページです';
      case 408:
        return 'タイムアウトです';
      case 414:
        return 'リクエストURIが長すぎます';
      case 500:
        return 'Internal Server Error';
      case 503:
        return 'Service Unavailable';
      default:
        return 'エラー';
    }
  }

}
