<?php

namespace App\Exceptions;

use Exception;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Session\TokenMismatchException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\HttpException;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that should not be reported.
     *
     * @var array
     */
    protected $dontReport = [
        \Illuminate\Auth\AuthenticationException::class,
        \Illuminate\Auth\Access\AuthorizationException::class,
        \Symfony\Component\HttpKernel\Exception\HttpException::class,
        \Illuminate\Database\Eloquent\ModelNotFoundException::class,
        \Illuminate\Session\TokenMismatchException::class,
        \Illuminate\Validation\ValidationException::class,
    ];

    /**
     * Report or log an exception.
     *
     * This is a great spot to send exceptions to Sentry, Bugsnag, etc.
     *
     * @param  \Exception  $exception
     * @return void
     */
    public function report(Exception $exception)
    {
        parent::report($exception);
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Exception  $exception
     * @return \Illuminate\Http\Response
     */
    public function render($request, Exception $exception)
    {
        if (config('app.debug'))
        {
            return parent::render($request, $exception);
        }

        if ($exception instanceof TokenMismatchException)
        {
            return redirect()
              ->back()
              ->with('error', 'セッションがタイムアウトしたか、アクセスできないページです');
        }

        if ($exception instanceof HttpException)
        {
            $status = $exception->getStatusCode();
            $message = $this->getMessage($status);

            return response()->view("errors.common", [
                'exception' => $exception,
                'message' => $message,
            ], $status);
        }

        return response()->view("errors.common", [
            'exception' => $exception,
            'message' => 'ページを表示できませんでした',
        ], 500);
    }

    /**
     * Convert an authentication exception into an unauthenticated response.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Illuminate\Auth\AuthenticationException  $exception
     * @return \Illuminate\Http\Response
     */
    protected function unauthenticated($request, AuthenticationException $exception)
    {
        if ($request->expectsJson()) {
            return response()->json(['error' => 'Unauthenticated.'], 401);
        }

        return redirect()->guest('admin/login');
    }

    public function getMessage($statusCode)
    {
      switch ($statusCode)
      {
        case 400:
          return 'Bad Request';
        case 401:
          return '認証に失敗しました';
        case 403:
          return 'アクセス権がありません';
        case 404:
          return '存在しないページです';
        case 408:
          return 'タイムアウトです';
        case 414:
          return 'リクエストURIが長すぎます';
        case 500:
          return 'Internal Server Error';
        case 503:
          return 'Service Unavailable';
        default:
          return 'エラー';
      }
    }

}
