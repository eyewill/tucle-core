<?php namespace App\Http\Presenters;

use App\User;
use Eyewill\TucleCore\Http\Presenters\ModelPresenter;

class EventLogPresenter extends ModelPresenter
{
  public $forms = [];

  /**
   */
  public $routes = [
    'index' => 'eventlog.index',
  ];

  /**
   */
  public $tableColumns = [
    [
      'name' => 'id',
      'label' => 'ID',
    ],
    [
      'name' => 'login_id',
      'label' => 'ログインID',
      'filter' => [
        'type' => 'select',
        'empty_label' => 'すべて表示',
      ],
    ],
    [
      'name' => 'role',
      'label' => 'ロール',
      'filter' => [
        'type' => 'checkbox',
        'values' => [
          1 => 'on',
        ],
      ],
    ],
    [
      'name' => 'event',
      'label' => 'イベント',
    ],
    [
      'name' => 'description',
      'label' => '詳細',
    ],
    [
      'name' => 'client_ip_address',
      'label' => 'IPアドレス',
    ],
    [
      'name' => 'created_at',
      'label' => '日時',
      'searchable' => false,
    ],
  ];

  /**
   */
  protected $breadCrumbs = [
    [
      'label' => 'イベントログ',
      'route' => 'index',
    ],
  ];

  protected $searchColumns = [
    [
      'name' => 'params',
    ],
  ];

  /**
   */
  protected $pageTitle = 'イベントログ';

  protected $hasRowActions = false;

  /**
   */
  protected $viewBase = 'event_log.';

  /**
   * @param $name
   * @param $request
   * @return array
   */
  protected function getBreadCrumbs($name, $request) {

    $breadCrumbs = [
      'index' => [
        [
          'label' => '一覧',
        ],
      ],
    ];

    return array_get($breadCrumbs, $name, []);
  }

  public function loginIdFilterValues()
  {
    $name = config('tucle.event_log.user_credential_key');
    return User::query()->pluck($name, $name);
  }

  public function roleValues()
  {
    return array_pluck(config('tucle.roles', []), 'label', 'name');
  }

  public function roleFilterValues()
  {
    return $this->roleValues();
  }

  public function roleTableColumn($model, $format)
  {
    $values = $this->roleValues();
    $format = '<td data-search="%s">%s</td>';
    $label = array_get($values, $model->role, 'label');

    return sprintf($format, $model->role, $label);
  }

  public function descriptionTableColumn($model, $format)
  {
    $value = $model->params;
    $value = mb_strimwidth($value, 0, 20, '…', 'UTF-8');
    $format = '<td>%s<pre class="code">%s</pre><pre class="code code-raw">%s</pre></td>';
    $decodeValue = json_decode($model->params, true);
    $json = '';
    if (!is_null($decodeValue))
    {
      $json = json_encode($decodeValue, JSON_PRETTY_PRINT|JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
    }

    return sprintf($format, $model->description, $value, $json);
  }
}